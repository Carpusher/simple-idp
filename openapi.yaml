openapi: 3.0.1
info:
  title: Simple-IDP API
  version: 1.0.0
  description: |
    Simple-IDP business logic APIs.
    For login related APIs please refernece Cognito User pool endpoints reference:
    https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-reference.html
servers:
  - url: https://simple-idp.click
tags:
  - name: Profile
  - name: Users
  - name: Statistics
paths:
  /api/profile:
    get:
      tags:
        - Profile
      operationId: describeProfile
      summary: Describe user profile
      description: Describe user profile
      security:
        - cognito-id-token: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/ServiceUnavailable"
    post:
      tags:
        - Profile
      operationId: updateProfile
      summary: Update user profile
      description: Update user profile
      security:
        - cognito-id-token: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/ServiceUnavailable"

  /api/users:
    get:
      tags:
        - Users
      operationId: listUsers
      summary: List users
      description: List users
      security:
        - cognito-id-token: []
      # TODO: Support pagination
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/ServiceUnavailable"

  /api/statistics:
    get:
      tags:
        - Statistics
      operationId: listStatistics
      summary: List statistics
      description: List statistics
      security:
        - cognito-id-token: []
      # TODO: Support pagination
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statistics:
                    type: array
                    items:
                      $ref: "#/components/schemas/Statistic"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/ServiceUnavailable"

components:
  schemas:
    Profile:
      type: object
      properties:
        email:
          type: string
          description: The email of the user.
          readOnly: true
          example: alice@example.com
        displayName:
          type: string
          description: The name of the user.
          example: Alice Who
      required:
        - email
        - displayName
    User:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the user.
          readOnly: true
        email:
          type: string
          description: The email of the user.
          readOnly: true
          example: alice@example.com
        displayName:
          type: string
          description: The name of the user.
          example: Alice Who
        created:
          type: string
          format: datetime
          description: Time when the user is created in simplified extended ISO format (ISO 8601).
          readOnly: true
          example: 2023-01-01T00:00:00.000Z
        loginCount:
          type: integer
          description: Number of login times of the user.
          readOnly: true
          example: 1
        lastSession:
          type: string
          format: datetime
          description: Time when the user is created in simplified extended ISO format (ISO 8601).
          readOnly: true
          example: 2023-01-01T00:00:00.000Z
      required:
        - id
    Statistic:
      type: object
      properties:
        name:
          type: string
          description: Unique name of the statistic.
          readOnly: true
          example: total-sign-ups
        value:
          type: number
          description: The value of the statistics.
          readOnly: true
          example: 100
      required:
        - name
        - value
    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message (optional)
          example: Error message.
  securitySchemes:
    cognito-id-token:
      type: apiKey
      name: Authorization
      in: header
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    ServiceUnavailable:
      description: ServiceUnavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
