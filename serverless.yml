service: simple-idp

plugins:
  - serverless-s3-deploy
  - serverless-s3-remover

provider:
  name: aws
  runtime: nodejs18.x
  architecture: arm64
  memorySize: 512
  logRetentionInDays: 30
  iam: # Sharing roles for functions is NOT following least privilege principal
    role:
      statements:
        - Effect: Allow
          Action:
            - 'secretsmanager:GetSecretValue'
          Resource: !GetAtt SimpleDatabase.MasterUserSecret.SecretArn
  endpointType: regional

custom:
  domainName: simple-idp.click # By Route53 Registrar
  # cSpell: disable-next-line
  rootDomainHostedZoneID: Z05506703IRO74FTLWKH9 # Created by Route53 Registrar
  assets:
    auto: true
    targets:
      - bucket:
          Ref: WebAppBucket
        empty: true
        files:
          - source: ./src/frontend/build/
            globs: '**/*'
  remover:
    buckets:
      - Ref: WebAppBucket

functions:
  databaseSchema:
    handler: src/backend/operations/databaseSchema.handler
    vpc: # Default VPC
      securityGroupIds:
        - sg-0588cc3387ee29541
      subnetIds:
        - subnet-08208e3e6e496e6c2
        - subnet-03e6a4d681a2c7024
        - subnet-0fc9ff7e364de4fd2
        - subnet-00c532b92da5da3d9
        - subnet-042cc6a53e5a9daf4
        - subnet-049a3b6888500a00a
    environment:
      PG_SECRET_ARN: !GetAtt SimpleDatabase.MasterUserSecret.SecretArn
      # cSpell: disable
      PGHOST: !GetAtt SimpleDatabase.Endpoint.Address
      PGPORT: !GetAtt SimpleDatabase.Endpoint.Port
      PGDATABASE: postgres
      # cSpell: enable
    timeout: 30
  postConfirmation:
    handler: src/backend/userPoolLambdaTriggers/postConfirmation.handler
    vpc: # Default VPC
      securityGroupIds:
        - sg-0588cc3387ee29541
      subnetIds:
        - subnet-08208e3e6e496e6c2
        - subnet-03e6a4d681a2c7024
        - subnet-0fc9ff7e364de4fd2
        - subnet-00c532b92da5da3d9
        - subnet-042cc6a53e5a9daf4
        - subnet-049a3b6888500a00a
    environment:
      PG_SECRET_ARN: !GetAtt SimpleDatabase.MasterUserSecret.SecretArn
      # cSpell: disable
      PGHOST: !GetAtt SimpleDatabase.Endpoint.Address
      PGPORT: !GetAtt SimpleDatabase.Endpoint.Port
      PGDATABASE: postgres
      # cSpell: enable
    events:
      - cognitoUserPool:
          pool: UserPool-OIMcbLxZe9YD # Could have avoid hard coding if letting Serverless Framework to create the pool
          trigger: PostConfirmation
          # Could be removed if letting Serverless Framework to create the pool
          existing: true
          forceDeploy: true
    # https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html#important-lambda-considerations
    timeout: 5

  describeProfile:
    handler: src/backend/services/profile/api.describeProfileHandler
    vpc: # Default VPC
      securityGroupIds:
        - sg-0588cc3387ee29541
      subnetIds:
        - subnet-08208e3e6e496e6c2
        - subnet-03e6a4d681a2c7024
        - subnet-0fc9ff7e364de4fd2
        - subnet-00c532b92da5da3d9
        - subnet-042cc6a53e5a9daf4
        - subnet-049a3b6888500a00a
    environment:
      PG_SECRET_ARN: !GetAtt SimpleDatabase.MasterUserSecret.SecretArn
      # cSpell: disable
      PGHOST: !GetAtt SimpleDatabase.Endpoint.Address
      PGPORT: !GetAtt SimpleDatabase.Endpoint.Port
      PGDATABASE: postgres
      # cSpell: enable
    events:
      - http:
          path: /api/profile
          method: get
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt UserPool.Arn

package:
  patterns:
    - '!src/frontend/**'

resources:
  Transform: AWS::Serverless-2016-10-31
  Resources:
    WebAppBucket:
      Type: AWS::S3::Bucket
    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebAppBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Resource: !Join ['/', [!GetAtt WebAppBucket.Arn, '*']]
              Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
    CloudFrontOriginAccessIdentity:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
          CloudFrontOriginAccessIdentityConfig:
            Comment: CloudFront OAI for ${self:custom.domainName}

    DomainCertificate:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${self:custom.domainName}
        ValidationMethod: DNS
        DomainValidationOptions:
          - DomainName: ${self:custom.domainName}
            HostedZoneId: ${self:custom.rootDomainHostedZoneID}
    WildDomainCertificate:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: '*.${self:custom.domainName}'
        ValidationMethod: DNS
        DomainValidationOptions:
          - DomainName: ${self:custom.domainName}
            HostedZoneId: ${self:custom.rootDomainHostedZoneID}

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.domainName}
          Enabled: true
          HttpVersion: http2
          DefaultRootObject: 'index.html'
          IPV6Enabled: true
          PriceClass: PriceClass_100
          ViewerCertificate:
            AcmCertificateArn: !Ref DomainCertificate
            MinimumProtocolVersion: TLSv1.2_2018
            SslSupportMethod: sni-only
          Origins:
            - DomainName: example.org # Dummy origin is used for Lambda@Edge functions, keep this as-is
              Id: dummy-origin
              CustomOriginConfig:
                OriginProtocolPolicy: match-viewer
            - Id: webapp
              DomainName: !GetAtt WebAppBucket.DomainName
              S3OriginConfig:
                OriginAccessIdentity:
                  !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
            - Id: api-profile
              DomainName: !Join
                - '.'
                - - !Ref ApiGatewayRestApi
                  - !Sub execute-api.${AWS::Region}.${AWS::URLSuffix}
              OriginPath: /${opt:stage}
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
                OriginSSLProtocols: ['TLSv1.2']
          DefaultCacheBehavior:
            TargetOriginId: webapp
            Compress: true
            ForwardedValues:
              QueryString: true
            # Prevent cache after signing out
            DefaultTTL: 0
            MaxTTL: 0
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: !Ref WebAppResponseHeadersPolicy
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !GetAtt LambdaEdgeProtection.Outputs.CheckAuthHandler
          CacheBehaviors:
            - PathPattern: /parse-auth
              Compress: true
              ForwardedValues:
                QueryString: true
              LambdaFunctionAssociations:
                - EventType: viewer-request
                  LambdaFunctionARN: !GetAtt LambdaEdgeProtection.Outputs.ParseAuthHandler
              TargetOriginId: dummy-origin
              ViewerProtocolPolicy: redirect-to-https
            - PathPattern: /refresh-auth
              Compress: true
              ForwardedValues:
                QueryString: true
              LambdaFunctionAssociations:
                - EventType: viewer-request
                  LambdaFunctionARN: !GetAtt LambdaEdgeProtection.Outputs.RefreshAuthHandler
              TargetOriginId: dummy-origin
              ViewerProtocolPolicy: redirect-to-https
            - PathPattern: /sign-out
              Compress: true
              ForwardedValues:
                QueryString: true
              LambdaFunctionAssociations:
                - EventType: viewer-request
                  LambdaFunctionARN: !GetAtt LambdaEdgeProtection.Outputs.SignOutHandler
              TargetOriginId: dummy-origin
              ViewerProtocolPolicy: redirect-to-https
            - PathPattern: /api/profile
              Compress: true
              TargetOriginId: api-profile
              ViewerProtocolPolicy: https-only
              # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
              # CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
              AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
                - PUT
                - PATCH
                - POST
                - DELETE
              ForwardedValues:
                Headers: ['Authorization']
                QueryString: true
              DefaultTTL: 0
              MaxTTL: 0
              MinTTL: 0
    RootRecordSetGroup:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: ${self:custom.rootDomainHostedZoneID}
        RecordSets:
          - Name: ${self:custom.domainName}
            Type: A
            AliasTarget:
              DNSName: !GetAtt CloudFrontDistribution.DomainName
              # Fixed value to target CloudFront Distribution
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget-1.html#cfn-route53-aliastarget-hostedzoneid
              # cSpell: disable-next-line
              HostedZoneId: Z2FDTNDATAQYW2
    WebAppResponseHeadersPolicy:
      Type: AWS::CloudFront::ResponseHeadersPolicy
      Properties: 
        ResponseHeadersPolicyConfig: 
          Name: !Sub ${AWS::StackName}-webapp-security-headers
          SecurityHeadersConfig: 
            StrictTransportSecurity: 
              AccessControlMaxAgeSec: 63072000
              IncludeSubdomains: true
              Override: true
              Preload: true
            ContentSecurityPolicy: 
              ContentSecurityPolicy: "default-src 'none'; connect-src 'self' cognito-idp.us-east-1.amazonaws.com; manifest-src 'self' *.${self:custom.domainName}; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'"
              Override: true
            ContentTypeOptions: 
              Override: true
            FrameOptions:
              FrameOption: DENY
              Override: true
            ReferrerPolicy: 
              ReferrerPolicy: "same-origin"
              Override: true
            XSSProtection: 
              ModeBlock: true
              Override: true
              Protection: true

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        UsernameAttributes: ['email']
        AutoVerifiedAttributes: ['email']
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_LINK
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId: !Ref UserPool
        Domain: authentication.${self:custom.domainName}
        CustomDomainConfig:
          CertificateArn: !Ref WildDomainCertificate
    UserPoolCustomDomainRecordSetGroup:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: ${self:custom.rootDomainHostedZoneID}
        RecordSets:
          - Name: authentication.${self:custom.domainName}
            Type: A
            AliasTarget:
              DNSName: !GetAtt UserPoolDomain.CloudFrontDistribution
              # Fixed value to target CloudFront Distribution
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget-1.html#cfn-route53-aliastarget-hostedzoneid
              # cSpell: disable-next-line
              HostedZoneId: Z2FDTNDATAQYW2
    FacebookIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        UserPoolId: !Ref UserPool
        ProviderName: Facebook
        ProviderType: Facebook
        ProviderDetails:
          client_id: ${ssm:simple-idp.facebook.clientID}
          client_secret: ${ssm:simple-idp.facebook.clientSecret}
          authorize_scopes: public_profile,email
          # api_version: 2.12
        AttributeMapping:
          # https://stackoverflow.com/a/15816460
          email: email
          name: name
    GoogleIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        UserPoolId: !Ref UserPool
        ProviderName: Google
        ProviderType: Google
        ProviderDetails:
          client_id: ${ssm:simple-idp.google.clientID}
          client_secret: ${ssm:simple-idp.google.clientSecret}
          authorize_scopes: profile email openid
        AttributeMapping:
          # https://developers.google.com/identity/openid-connect/openid-connect#an-id-tokens-payload
          email: email
          name: name
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref UserPool
        GenerateSecret: false
        CallbackURLs:
          - https://${self:custom.domainName}/parse-auth
        LogoutURLs:
          - https://${self:custom.domainName}/
        DefaultRedirectURI: https://${self:custom.domainName}/parse-auth
        PreventUserExistenceErrors: ENABLED
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - email
          - phone
          - openid
          - aws.cognito.signin.user.admin
        SupportedIdentityProviders:
          - COGNITO
          - Google
          - Facebook

    # https://github.com/aws-samples/cloudfront-authorization-at-edge
    LambdaEdgeProtection:
      Type: AWS::Serverless::Application
      DependsOn: UserPoolDomain
      Properties:
        Location:
          ApplicationId: arn:aws:serverlessrepo:us-east-1:520945424137:applications/cloudfront-authorization-at-edge
          SemanticVersion: 2.1.5
        Parameters:
          UserPoolArn: !GetAtt UserPool.Arn
          UserPoolClientId: !Ref UserPoolClient
          UserPoolAuthDomain: authentication.${self:custom.domainName}
          CreateCloudFrontDistribution: false
          RedirectPathSignIn: /parse-auth
          RedirectPathSignOut: /
          RedirectPathAuthRefresh: /refresh-auth
          SignOutUrl: /sign-out
          OAuthScopes: !Join
            - ","
            - - email
              - phone
              - openid
              - aws.cognito.signin.user.admin

    # Under default VPC
    SimpleDatabase:
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: postgres
        EngineVersion: 14.6
        DBInstanceClass: db.t3.micro
        AllocatedStorage: 5
        ManageMasterUserPassword: true
        MasterUsername: postgres
    SecretManagerInterfaceEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
        VpcEndpointType: Interface
        PrivateDnsEnabled: true
        # Default VPC
        VpcId: vpc-0ccd072e8faccb975
        SubnetIds:
          - subnet-08208e3e6e496e6c2
          - subnet-03e6a4d681a2c7024
          - subnet-0fc9ff7e364de4fd2
          - subnet-00c532b92da5da3d9
          - subnet-042cc6a53e5a9daf4
          - subnet-049a3b6888500a00a